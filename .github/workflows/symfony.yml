# https://help.github.com/en/actions
name: Full CI process for Symfony 5
on:
  push:
    branches:
      - V5
      - main

jobs:
  symfony:
    name: Symfony 5.2 (PHP ${{ matrix.php-versions }})
    # https://hub.docker.com/_/ubuntu/
    runs-on: ubuntu-20.04
    services:
      # https://docs.docker.com/samples/library/mysql/
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    strategy:
      fail-fast: true
      matrix:
        php-versions: ['7.4']
    steps:

      # —— Setup Github actions 🐙 —————————————————————————————————————————————
      # https://github.com/actions/checkout (official)
      - name: Checkout
        uses: actions/checkout@v2

      # https://github.com/shivammathur/setup-php (community)
      - name: Setup PHP, extensions and composer with shivammathur/setup-php
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, iconv, json, mbstring, pdo
        env:
          update: true

      - name: Check PHP Version
        run: php -v

      # https://github.com/zhulik/redis-action (community)
      - name: Setup Redis with zhulik/redis-action
        uses: zhulik/redis-action@1.1.0
        with:
          redis version: '5'

      # —— Composer 🧙‍️ —————————————————————————————————————————————————————————
      - name: Validate composer.json and composer.lock
        run: composer validate

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install

      # —— CS-Fixer 🎵 ——————————————————————————————————————————————————————————
      - name: Fix syntax errors
        run: vendor/bin/php-cs-fixer fix -v --dry-run --stop-on-violation --diff

      # —— PHPStan 🎵 ——————————————————————————————————————————————————————————
      - name: Find bugs in code
        run: vendor/bin/phpstan analyse src

      # —— Symfony 🎵 ——————————————————————————————————————————————————————————
      - name: Check the Symfony console
        run: bin/console about

      # —— Project init 🎵 ——————————————————————————————————————————————————————————
      - name: Create database for test
        run: composer workflowInit

      # —— Tests ✅ ———————————————————————————————————————————————————————————
      - name: Run functionnal and unit tests
        run: vendor/bin/phpunit --configuration phpunit.xml.dist

      # —— SonarQube 🎵 ——————————————————————————————————————————————————————————
      - name: Run SonarQube analysis
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        # If you wish to fail your job when the Quality Gate is red, uncomment the
        # following lines. This would typically be used to fail a deployment.
        # - uses: sonarsource/sonarqube-quality-gate-action@master
        #   timeout-minutes: 5
        #   env:
        #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
